{{range .Types}}
{{ if .Schema.Description }}{{ toGoComment .Schema.Description .TypeName  }}{{ else }}// {{.TypeName}} defines model for {{.JsonName}}.{{ end }}
type {{.TypeName}} {{if .IsAlias }}={{end}} {{.Schema.TypeDecl}}
{{end}}

type RawMessage []byte

func UnmarshalXML(d *xml.Decoder, start xml.StartElement) ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := xml.NewEncoder(buf)

	if err := encoder.EncodeToken(start); err != nil {
		return nil, err
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}

		if err = encoder.EncodeToken(tok); err != nil {
			return nil, err
		}

		if end, ok := tok.(xml.EndElement); ok && end.Name == start.Name {
			encoder.Flush()
			break
		}
	}

	return buf.Bytes(), nil
}
